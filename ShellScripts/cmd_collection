scp -P36000 dts_packages.zip root@10.249.0.1:/data/

unzip -d /temp test.zip

yum search xorg-x11-apps
yum install -y xorg-x11-apps.x86_64
yum whatprovides "*xhost"
yum install -y  xorg-x11-server-utils-7.7-20.el7.x86_64
yum -y install xorg-x11-xauth

systemctl  restart  sshd.service  # 重启ssh

# 用户组与用户的概念：
groupadd -g 1001 oinstall  # 创建一个用户组，并指定组id为1001
groupadd -g 1200 dba
useradd -u 1101 -g oinstall -G dba -d /home/oracle oracle  # -g: 指定用户登陆组的GID或组名；
#  -G: 指定用户除登陆组之外所属的一个或多个附加组 -d:为主目录指定一个名字，如果不想用登录名作为主目录名的话
#  -u: 为用户指定唯一的UID
chown oracle:oinstall /oracle/app/ogg/db19.3/ogg191_ma  # oracle.oinstall也是可以的，前面是用户，后面是用户组
chown oracle:oinstall /oracle/app/ogg/db19.3/ogg191_sm
chown oracle:oinstall /oracle/app/ogg/db19.3/ogg191_deploy

dd if=/dev/zero of=/home/swapfile bs=1M count=512  # 使用dd命令在/home下创建一个名为swapfile的文件，大小为512MB
mkswap /home/swapfile  # 使用 mkswap 命令将此文件作为交换文件
swapon /home/swapfile  # 启用新创建的交换文件

echo "This is a test" | sed 's/test/big test/'
sed 's/dog/cat/' demo.txt
sed -e 's/blue/red/; s/dog/cat/' demo.txt  # 要执行多个命令，使用-e选项
sed -f blue.sed demo.txt  # -f 指定文件
sed -n 's/blue/123/p' demo.txt  # -n会禁止sed编辑器的输出
sed -n '/3/p' demo.txt  # 打印包含匹配文本的行
sed -n '2,3p' demo.txt  # 打印第2,3行的数据
sed 's/blue/red/w new2.txt' demo.txt
sed '1,2w 2line.txt' demo.txt  # 特定行写入新文件
sed 's!/bin/bash!/bin/csh!' /etc/passwd  # 分隔符不一定非得是/
sed  '5,$s/blue/red/' demo.txt  # 指定范围，每一行都会输出出来，要么是原来的，要么是替换后的
sed '/qiqi/s/bash/csh/' /etc/passwd  # 只匹配存在qiqi关键字的文本
sed '2,$d' demo.txtsed '2,$d' demo.txt
sed '/number 1/d' demo.txt  # 删除含number 1的行
sed '/2/,/3/d' demo.txtsed '/2/,/3/d' demo.txt  # 搜到有2的行开始删除，搜到有3的行结束删除,后续再遇到2的时候继续开始删除
echo "Test line 2" | sed 'i\Test line 1'  # 插入到前面
echo "Test line 2" | sed 'a\Test line 1'  # 插入到后面
sed '3i\new line' demo.txt   # 插入到文件的第3行前
sed '$a\end line' demo.txt  # 插入到文件的末尾
sed '3c\changed line' demo.txt  # 修改第3行的内容
sed '2,3c\changed line' demo.txt  # 会将第2，3行的内容都替换掉
sed '/3/c\changed line' demo.txt  # 修改第3行的内容
echo 'This 1 is a test of 1 try.' | sed 'y/123/456/'  # 单个字符替换，1->4, 2->5, 3->6
sed '=' demo.txt  # 打印行号
sed -n 'l' demo.txt  # 打印数据流中的文本和不可打印的ASCII字符
sed '3r 2line.txt' demo.txt  # 于demo.txt的第3行后，插入2line.txt的内容
sed '/2a/r 2line.txt' demo.txt  # 在demo.txt中找到2a后，在这一行的后面，插入2line.txt的内容



gawk '{print $1}' demo.txt  # gawk默认的字段分隔符为任意的空白字符
gawk -F: '{print $1}' demo.txt  # 可以用-F选项指定字段分割符
echo "My name is rich" | gawk '{$4="xx"; print $0}'echo "My name is rich" | gawk '{$4="xx"; print $0}'  # 多个命令间用分号间隔
gawk -F: -f home.gawk /etc/passwdgawk -F: -f home.gawk /etc/passwd  # home.gawk 文件中的内容为：{print $1 "'s home directory is " $6}
gawk 'BEGIN {print "Hello World"}'  # BEGIN关键字后指定的脚本会在读取数据前执行

netstat -tunlp | grep 7809  #查看端口使用情况

grep -r '$#' *  # 全局搜索

#vim
:%s/Linux/linux/g  # 全部替换
u  # Undo 已经做了某些改动，回退回去
ctrl + r # redo  回退多了,再做一次

chmod +x oggOneButtonInstall.sh  # 脚本增加可执行权限

uname -a  # 检查内核版本信息

docker run -it ubuntu /bin/bash  # 使用docker run命令创建容器 -i标志保证容器中STDIN是开启的，交互式shell依赖于持久的标准输入 -t标志告诉docker为要创建的容器分配一个伪tty终端 exit后，容器会随之停止运行 做的改动重新进入时也会消失
docker run --name ubuntu2023 -it ubuntu /bin/bash  # 创建容器时指定容器名称, 容器名称与容器id一样，可以作为容器的唯一标识， 用起来更方便
docker run --name eleme -d ubuntu /bin/sh -c "while true; do echo hello world ; sleep 1; done"  # 创建长期运行的容器, -d参数会使docker将容器放在后台运行
docker start ubuntu2023  # 启动已经停止运行的容器
docker logs eleme  # 获取容器的日志
docker logs -f eleme  # 跟踪守护式容器的日志, 也会打印之前的，然后跟踪新生成的
docker logs --tail 5 eleme  # 获取日志的最后5行内容
docker logs --tail 0 -f eleme  # 不打印原有内容，只跟踪打印新生成的日志
docker logs --tail 0 -tf eleme  # -t 打印时间戳
docker restart ubuntu2023  # 重新启动容器
docker attach ubuntu2023  # 附着到容器的会话上 容器重新启动后会运行一个交互式会话shell，可使用此命令附着到正在运行的容器,exit退出容器的shell，容器会再次停止运行
docker top eleme  # 查看守护式容器内的进程
docker stats eleme haohaoxuexi  # 查看多个守护式容器的统计信息
docker exec -d haohaoxuexi touch /etc/new_config_file  # 在容器中运行后台任务
docker exec -it haohaoxuexi /bin/bash  # 在容器内运行交互命令
docker stop haohaoxuexi  # 停止正在运行的docker实例
docker ps -n 3  # 显示最近的3个容器，不论是正在运行还是已停止
docker kill eleme  # 快速停止某个容器
docker run --restart=always --name tiantianxiangshang -d ubuntu /bin/sh -c "while true; do echo hello world; sleep 1; done"  # 自动重启容器，不知道怎么测试效果
docker inspect tiantianxiangshang  # 对容器进行详细检查，返回配置信息，包括名称，命令，网络配置等
docker inspect -f='{{ .State.Running }}' tiantianxiangshang  # 返回容器的运行状态 -f 等价于--format, 支持完整的Go语言模板
man docker-run  # docker的man页
docker inspect -f='{{.Name}} {{ .State.Running }}' haohaoxuexi tiantianxiangshang  
docker rm -f haohaoxuexi  # 删除容器，如果容器正在运行，则强制删除
docker rm -f `docker ps  -a -q | tail -n 1`   # 批量删除多个容器
docker images  # 列出docker镜像
docker pull ubuntu:12.04  # 拉取指定版本的docker镜像
docker run -it --name xiangfengerxing ubuntu:12.04 /bin/bash  # 使用冒号+标签名指定特定镜像
docker images ubuntu   # 查看ubuntu相关的镜像都有哪些
docker help  # 列出docker完整的命令列表
docker search puppet  # 查找镜像
docker login  # 登录docker hub账号
docker logout # 登出docker hub账号
docker ps -a  # 查看当前系统中容器的列表 不加-a就只展示正在运行的 -l 列出最近一次运行的容器
hostname  # 容器的主机名就是该容器的id
ip a  # 查看所有网卡的接口信息
ip link list  # 显示网络设备的运行状态

ps -aux  # 以BSD方式显示 a 显示所有用户的进程(show processes for all users) u 显示用户(display the process’s user/owner) x 显示无控制终端的进程(also show processes not attached to a terminal) 
ps -ef  # ps -ef 是以System V方式显示，该种方式比BSD方式显示的多 e 显示所有用户的进程(all processes)此参数的效果和指定"a"参数相同 f 用ASCII字符显示树状结构，表达程序间的相互关系(ASCII art forest)

apt-get update && apt-get install vim  # ubuntu安装软件
apt-get -yqq update
apt-get -y install apache2  # ubuntu安装apache2
